--- cpufreq_hotplug.c	2012-09-20 07:56:27.430885717 +0900
+++ cpufreq_hotplug.c.new	2012-10-02 10:49:00.748482532 +0900
@@ -67,8 +67,6 @@
 	cputime64_t prev_cpu_nice;
 	struct cpufreq_policy *cur_policy;
 	struct delayed_work work;
-	struct work_struct cpu_up_work;
-	struct work_struct cpu_down_work;
 	struct cpufreq_frequency_table *freq_table;
 	int cpu;
 	/*
@@ -474,7 +472,6 @@
 	/* calculate the average load across all related CPUs */
 	avg_load = total_load / num_online_cpus();
 
-	mutex_lock(&dbs_mutex);
 
 	/*
 	 * hotplug load accounting
@@ -516,10 +513,15 @@
 	/* check if auxiliary CPU is needed based on avg_load */
 	if (avg_load > dbs_tuners_ins.up_threshold) {
 		/* should we enable auxillary CPUs? */
-		if (num_online_cpus() < num_possible_cpus() && hotplug_in_avg_load >
+		if (num_online_cpus() < 2 && hotplug_in_avg_load >
 				dbs_tuners_ins.up_threshold) {
-			queue_work_on(this_dbs_info->cpu, khotplug_wq,
-					&this_dbs_info->cpu_up_work);
+			/* hotplug with cpufreq is nasty
+			 * a call to cpufreq_governor_dbs may cause a lockup.
+			 * wq is not running here so its safe.
+			 */
+			mutex_unlock(&this_dbs_info->timer_mutex);
+			cpu_up(1);
+			mutex_lock(&this_dbs_info->timer_mutex);
 			goto out;
 		}
 	}
@@ -541,8 +543,9 @@
 			/* should we disable auxillary CPUs? */
 			if (num_online_cpus() > 1 && hotplug_out_avg_load <
 					dbs_tuners_ins.down_threshold) {
-				queue_work_on(this_dbs_info->cpu, khotplug_wq,
-					&this_dbs_info->cpu_down_work);
+				mutex_unlock(&this_dbs_info->timer_mutex);
+				cpu_down(1);
+				mutex_lock(&this_dbs_info->timer_mutex);
 			}
 			goto out;
 		}
@@ -567,22 +570,9 @@
 					 CPUFREQ_RELATION_L);
 	}
 out:
-	mutex_unlock(&dbs_mutex);
 	return;
 }
 
-static void do_cpu_up(struct work_struct *work)
-{
-	int i = num_online_cpus();
-	if( i < num_possible_cpus() && !cpu_online(i) ) cpu_up(i);
-}
-
-static void do_cpu_down(struct work_struct *work)
-{
-	int i = num_online_cpus() - 1;
-	if( i > 0 && cpu_online(i) ) cpu_down(i);
-}
-
 static void do_dbs_timer(struct work_struct *work)
 {
 	struct cpu_dbs_info_s *dbs_info =
@@ -605,8 +595,6 @@
 	delay -= jiffies % delay;
 
 	INIT_DELAYED_WORK_DEFERRABLE(&dbs_info->work, do_dbs_timer);
-	INIT_WORK(&dbs_info->cpu_up_work, do_cpu_up);
-	INIT_WORK(&dbs_info->cpu_down_work, do_cpu_down);
 	queue_delayed_work_on(dbs_info->cpu, khotplug_wq, &dbs_info->work,
 		delay);
 }
